# This is a sample build configuration for Python.
# Check our guides at https://confluence.atlassian.com/x/x4UWN for more examples.
# Only use spaces to indent your .yml configuration.
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
#image: continuumio/miniconda3
image: qgis/qgis
pipelines:
  custom:
    scheduled-testing:
    - step:
        name: create plugin folder
        services:
          - docker
        caches:
          - docker
          - pip
        script:
          - apt-get install -y wget
          - apt-get install -y unzip
          - apt-get -y install xvfb
          - apt-get -y install git-lfs
          - git lfs install
          - git lfs fetch
          - git lfs pull
          - git lfs checkout
          - Xvfb :1 -screen 0 1024x768x16 &> xvfb.log  &
          #- ps aux | grep X
          - DISPLAY=:1.0
          - export DISPLAY
          - wget https://bitbucket.org/jakimowb/qgispluginsupport/downloads/qgisresources.zip -O qgisresources.zip
          - unzip qgisresources.zip
          - python3 -m pip install -r requirements.txt
          - export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          - python3 --version
          - echo " PYTHONPATH "
          - printenv PYTHONPATH
          - python3 scripts/setuprepository.py
          - python3 scripts/create_plugin.py -tu
        artifacts: # defining the artifacts to be passed to each future step.
          - deploy/enmapboxplugin.*.zip
          - deploy/enmapboxplugin/**
          - enmapboxtestdata/**
          - qgisresources/**
    - step:
        name: run unit tests
        services:
          - docker
        caches:
          - docker
          - pip
          #- condacache
        script: # Modify the commands below to build your repository.
          #- apt-get -y install build-essential
          - apt-get -y install xvfb
          - apt-get -y install git-lfs
          - Xvfb :1 -screen 0 1024x768x16 &> xvfb.log  &
          #- ps aux | grep X
          - DISPLAY=:1.0
          - export DISPLAY
          - mkdir test-reports
          - python3 -m pip install -r requirements.txt
          - python3 -m pip install xmlrunner
          - python3 --version
          - export PYTHONPATH="${PYTHONPATH}:$(pwd)/deploy/enmapboxplugin"
          - echo " PYTHONPATH "
          - cp .coveragec deploy/enmapboxplugin
          #- cd deploy/enmapboxplugin
          - printenv PYTHONPATH

          # run scripts/createruntests.py to generate the following lines
          - python3 -m coverage run --rcfile=.coveragec  enmapboxtesting/test_applications.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_crosshair.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_cursorlocationsvalues.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_datasources.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_dependencycheck.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_docksanddatasources.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_enmapbox.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_enmapboxplugin.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_enmapboxprocessingprovider.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_hiddenqgislayers.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_mapcanvas.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_mimedata.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_options.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_settings.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_speclibs.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_spectralprofilesources.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_splashscreen.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_template.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_testdata_dependency.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_testing.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_utils.py
          - python3 -m coverage run --rcfile=.coveragec --append  enmapboxtesting/test_vectorlayertools.py
          - python3 -m coverage run --rcfile=.coveragec --append  hubdc/test/test_algorithm.py
          - python3 -m coverage run --rcfile=.coveragec --append  hubdc/test/test_core.py
          - python3 -m coverage report
definitions:
  caches:
    condacache: /opt/conda
